package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/spf13/cobra"
)

type VSCodeExtension struct {
	config    *Config
	apiClient *APIClient
}

func NewVSCodeExtension() *VSCodeExtension {
	config, err := LoadConfig()
	if err != nil {
		fmt.Printf("Warning: failed to load config: %v\n", err)
		config = &Config{}
	}

	return &VSCodeExtension{
		config:    config,
		apiClient: NewAPIClient(config),
	}
}

func (v *VSCodeExtension) CreateRootCommand() *cobra.Command {
	var rootCmd = &cobra.Command{
		Use:   "sortme",
		Short: "Sort-me.org VSCode Plugin",
		Long:  "–ü–ª–∞–≥–∏–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏–π –Ω–∞ sort-me.org —á–µ—Ä–µ–∑ VSCode",
	}

	rootCmd.AddCommand(
		v.createAuthCommand(),
		v.createSubmitCommand(),
		v.createStatusCommand(),
		v.createWhoamiCommand(),
		v.createLogoutCommand(),
		v.createExploreCommand(),
		v.createListCommand(),
		v.createContestsCommand(),
		v.createProblemsCommand(),
		v.createDownloadCommand(),
	)

	return rootCmd
}

func (v *VSCodeExtension) createAuthCommand() *cobra.Command {
	return &cobra.Command{
		Use:   "auth",
		Short: "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ sort-me.org",
		Long:  "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å sort-me.org",
		Run: func(cmd *cobra.Command, args []string) {
			reader := bufio.NewReader(os.Stdin)

			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username: ")
			username, _ := reader.ReadString('\n')
			username = strings.TrimSpace(username)

			fmt.Print("–í–≤–µ–¥–∏—Ç–µ session token: ")
			token, _ := reader.ReadString('\n')
			token = strings.TrimSpace(token)

			v.config.Username = username
			v.config.SessionToken = token
			v.config.UserID = username

			if err := SaveConfig(v.config); err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v\n", err)
				return
			}

			fmt.Println("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
			fmt.Printf("Username: %s\n", username)
			fmt.Printf("Token: %s\n", maskToken(token))
		},
	}
}

func (v *VSCodeExtension) createSubmitCommand() *cobra.Command {
	var contestID, problemID, language string

	cmd := &cobra.Command{
		Use:   "submit [file]",
		Short: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			filename := args[0]
			v.handleSubmit(filename, contestID, problemID, language)
		},
	}

	cmd.Flags().StringVarP(&contestID, "contest", "c", "", "ID –∫–æ–Ω—Ç–µ—Å—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
	cmd.Flags().StringVarP(&problemID, "problem", "p", "", "ID –∑–∞–¥–∞—á–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
	cmd.Flags().StringVarP(&language, "language", "l", "", "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

	cmd.MarkFlagRequired("contest")
	cmd.MarkFlagRequired("problem")

	return cmd
}

func (v *VSCodeExtension) createStatusCommand() *cobra.Command {
	return &cobra.Command{
		Use:   "status [submission_id]",
		Short: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			submissionID := args[0]
			v.handleStatus(submissionID)
		},
	}
}

func (v *VSCodeExtension) createWhoamiCommand() *cobra.Command {
	return &cobra.Command{
		Use:   "whoami",
		Short: "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
		Run: func(cmd *cobra.Command, args []string) {
			if !v.apiClient.IsAuthenticated() {
				fmt.Println("‚ùå –í—ã –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã")
				fmt.Println("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
				fmt.Println("  sortme auth - –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
				return
			}
			fmt.Printf("‚úÖ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s\n", v.config.Username)
			fmt.Printf("User ID: %s\n", v.config.UserID)
			fmt.Printf("Session token: %s\n", maskToken(v.config.SessionToken))
		},
	}
}

func (v *VSCodeExtension) createLogoutCommand() *cobra.Command {
	return &cobra.Command{
		Use:   "logout",
		Short: "–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
		Run: func(cmd *cobra.Command, args []string) {
			v.config.SessionToken = ""
			v.config.UserID = ""
			v.config.Username = ""
			v.config.TelegramToken = ""

			if err := SaveConfig(v.config); err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: %v\n", err)
				return
			}

			fmt.Println("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
			fmt.Println("–í—Å–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
		},
	}
}

func (v *VSCodeExtension) createExploreCommand() *cobra.Command {
	return &cobra.Command{
		Use:   "explore",
		Short: "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é API",
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Println("üîç –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ö–∞–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å API sort-me.org")
			fmt.Println("==============================================")
			fmt.Println()
			fmt.Println("1. üñ•Ô∏è  –û–¢–ö–†–û–ô–¢–ï –ë–†–ê–£–ó–ï–†:")
			fmt.Println("   - –ó–∞–π–¥–∏—Ç–µ –Ω–∞ https://sort-me.org")
			fmt.Println("   - –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç")
			fmt.Println()
			fmt.Println("2. üîß –û–¢–ö–†–û–ô–¢–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê:")
			fmt.Println("   - –ù–∞–∂–º–∏—Ç–µ F12")
			fmt.Println("   - –ò–ª–∏ Ctrl+Shift+I (Windows/Linux)")
			fmt.Println("   - –ò–ª–∏ Cmd+Option+I (Mac)")
			fmt.Println()
			fmt.Println("3. üì° –ü–ï–†–ï–ô–î–ò–¢–ï –ù–ê –í–ö–õ–ê–î–ö–£ 'NETWORK':")
			fmt.Println("   - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É 'Network'")
			fmt.Println("   - –ü–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É 'Preserve log'")
			fmt.Println("   - –û—á–∏—Å—Ç–∏—Ç–µ —Å–ø–∏—Å–æ–∫ (–∫–Ω–æ–ø–∫–∞ üö´)")
			fmt.Println()
			fmt.Println("4. üöÄ –û–¢–ü–†–ê–í–¨–¢–ï –†–ï–®–ï–ù–ò–ï –ß–ï–†–ï–ó –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°:")
			fmt.Println("   - –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ—Å—Ç –∏ –∑–∞–¥–∞—á—É")
			fmt.Println("   - –ù–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ —Ä–µ—à–µ–Ω–∏—è")
			fmt.Println("   - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'/'Submit'")
			fmt.Println()
			fmt.Println("5. üîé –ù–ê–ô–î–ò–¢–ï API –ó–ê–ü–†–û–°:")
			fmt.Println("   - –í —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—â–∏—Ç–µ:")
			fmt.Println("     * –ú–µ—Ç–æ–¥: POST")
			fmt.Println("     * –í URL –µ—Å—Ç—å —Å–ª–æ–≤–∞: 'submit', 'solution', 'contest'")
			fmt.Println("     * Status: 200 (—É—Å–ø–µ—à–Ω–æ)")
			fmt.Println()
			fmt.Println("6. üìã –°–û–ë–ï–†–ò–¢–ï –ò–ù–§–û–†–ú–ê–¶–ò–Æ:")
			fmt.Println("   - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
			fmt.Println("   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ:")
			fmt.Println("     –∞) –ü–æ–ª–Ω—ã–π URL (–≤–∫–ª–∞–¥–∫–∞ Headers ‚Üí General)")
			fmt.Println("     –±) Headers (–≤–∫–ª–∞–¥–∫–∞ Headers ‚Üí Request Headers)")
			fmt.Println("     –≤) –î–∞–Ω–Ω—ã–µ (–≤–∫–ª–∞–¥–∫–∞ Payload/Json)")
			fmt.Println()
			fmt.Println("7. üìù –ó–ê–ü–ò–®–ò–¢–ï –ù–ê–ô–î–ï–ù–ù–û–ï –ò –°–û–û–ë–©–ò–¢–ï –ú–ù–ï!")
		},
	}
}

func (v *VSCodeExtension) createListCommand() *cobra.Command {
	var limit int

	cmd := &cobra.Command{
		Use:   "list",
		Short: "–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫",
		Long: `–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫

–ü—Ä–∏–º–µ—Ä—ã:
  sortme list          # 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
  sortme list --limit 20  # 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫`,
		Run: func(cmd *cobra.Command, args []string) {
			v.handleList(limit)
		},
	}

	cmd.Flags().IntVarP(&limit, "limit", "l", 10, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞")

	return cmd
}

func (v *VSCodeExtension) createContestsCommand() *cobra.Command {
	return &cobra.Command{
		Use:   "contests",
		Short: "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–µ—Å—Ç–æ–≤",
		Run: func(cmd *cobra.Command, args []string) {
			v.handleContests()
		},
	}
}

func (v *VSCodeExtension) createProblemsCommand() *cobra.Command {
	return &cobra.Command{
		Use:   "problems [contest_id]",
		Short: "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ –∫–æ–Ω—Ç–µ—Å—Ç–µ",
		Args:  cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			contestID := args[0]
			v.handleProblems(contestID)
		},
	}
}

func (v *VSCodeExtension) createDownloadCommand() *cobra.Command {
	return &cobra.Command{
		Use:   "download [contest_id] [problem_id]",
		Short: "–°–∫–∞—á–∞—Ç—å —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏",
		Args:  cobra.ExactArgs(2),
		Run: func(cmd *cobra.Command, args []string) {
			contestID := args[0]
			problemID := args[1]
			v.handleDownload(contestID, problemID)
		},
	}
}

func (v *VSCodeExtension) handleSubmit(filename, contestID, problemID, language string) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
	if _, err := os.Stat(filename); os.IsNotExist(err) {
		fmt.Printf("‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %s\n", filename)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
	if !v.apiClient.IsAuthenticated() {
		fmt.Println("‚ùå –í—ã –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.")
		fmt.Println("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥:")
		fmt.Println("  sortme auth      - —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞")
		fmt.Println("  sortme webauth   - —á–µ—Ä–µ–∑ –≤–µ–±-—Å–∞–π—Ç")
		fmt.Println("  sortme manualauth - —Ä—É—á–Ω–æ–π –≤–≤–æ–¥")
		return
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
	if language == "" {
		language = v.apiClient.DetectLanguage(filename)
		if language == "unknown" {
			fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.")
			fmt.Println("–£–∫–∞–∂–∏—Ç–µ —è–≤–Ω–æ —á–µ—Ä–µ–∑ --language")
			fmt.Println("–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: python, java, c++, c, go, javascript, rust, typescript, php, ruby, csharp")
			return
		}
		fmt.Printf("üîç –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: %s\n", language)
	} else {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫
		supportedLangs := map[string]bool{
			"python": true, "java": true, "c++": true, "c": true,
			"go": true, "javascript": true, "rust": true,
			"typescript": true, "php": true, "ruby": true, "csharp": true,
		}
		if !supportedLangs[language] {
			fmt.Printf("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫: %s\n", language)
			fmt.Println("–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: python, java, c++, c, go, javascript, rust, typescript, php, ruby, csharp")
			return
		}
	}

	// –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
	sourceCode, err := ReadSourceCode(filename)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
		return
	}

	fmt.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è...\n")
	fmt.Printf("üìù –§–∞–π–ª: %s\n", filename)
	fmt.Printf("üèÜ –ö–æ–Ω—Ç–µ—Å—Ç: %s\n", contestID)
	fmt.Printf("üìö –ó–∞–¥–∞—á–∞: %s\n", problemID)
	fmt.Printf("üíª –Ø–∑—ã–∫: %s\n", language)
	fmt.Printf("üìä –†–∞–∑–º–µ—Ä –∫–æ–¥–∞: %d —Å–∏–º–≤–æ–ª–æ–≤\n", len(sourceCode))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ
	response, err := v.apiClient.SubmitSolution(contestID, problemID, language, sourceCode)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v\n", err)
		fmt.Println("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
		fmt.Println("  - –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
		fmt.Println("  - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å contest ID –∏ problem ID")
		fmt.Println("  - –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å session token (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è)")
		return
	}

	fmt.Printf("‚úÖ –†–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n")
	fmt.Printf("üéØ ID –æ—Ç–ø—Ä–∞–≤–∫–∏: %s\n", response.ID)
	fmt.Printf("üìà –°—Ç–∞—Ç—É—Å: %s\n", response.Status)
	if response.Message != "" {
		fmt.Printf("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: %s\n", response.Message)
	}

	fmt.Printf("\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:\n")
	fmt.Printf("sortme status %s\n", response.ID)
}

func (a *APIClient) GetSubmissionStatus(submissionID string) (*SubmissionStatus, error) {
	if !a.IsAuthenticated() {
		return nil, fmt.Errorf("not authenticated")
	}

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º REST
	status, err := a.tryRESTStatus(submissionID)
	if err == nil {
		return status, nil
	}

	// –ï—Å–ª–∏ REST –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º WebSocket
	fmt.Printf("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ %s\n", submissionID)
	return a.getStatusViaWebSocket(submissionID)
}

func (v *VSCodeExtension) handleStatus(submissionID string) {
	if !v.apiClient.IsAuthenticated() {
		fmt.Println("‚ùå –í—ã –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã")
		return
	}

	fmt.Printf("üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ %s...\n", submissionID)

	status, err := v.apiClient.GetSubmissionStatus(submissionID)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: %v\n", err)
		return
	}

	fmt.Printf("üìä –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ %s:\n", submissionID)
	fmt.Printf("   üÜî ID: %s\n", status.ID)
	fmt.Printf("   üìà –°—Ç–∞—Ç—É—Å: %s\n", getStatusEmoji(status.Status))

	if status.Result != "" {
		fmt.Printf("   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: %s\n", status.Result)
	}
	if status.Score > 0 {
		fmt.Printf("   ‚≠ê –ë–∞–ª–ª—ã: %d\n", status.Score)
	}
	if status.Time != "" {
		fmt.Printf("   ‚è±Ô∏è  –í—Ä–µ–º—è: %s\n", status.Time)
	}
	if status.Memory != "" {
		fmt.Printf("   üíæ –ü–∞–º—è—Ç—å: %s\n", status.Memory)
	}

	fmt.Printf("   üåê –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://sort-me.org/submission/%s\n", submissionID)
}

func (v *VSCodeExtension) handleList(limit int) {
	if !v.apiClient.IsAuthenticated() {
		fmt.Println("‚ùå –í—ã –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã")
		return
	}

	fmt.Printf("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ %d –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫...\n\n", limit)

	submissions, err := v.apiClient.GetSubmissions(limit)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–æ–∫: %v\n", err)
		return
	}

	if len(submissions) == 0 {
		fmt.Println("üì≠ –û—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return
	}

	fmt.Printf("\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ %d –æ—Ç–ø—Ä–∞–≤–æ–∫:\n", len(submissions))

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
	maxTaskWidth := 35
	for _, sub := range submissions {
		taskName := getTaskDisplayName(sub)
		if len(taskName) > maxTaskWidth {
			maxTaskWidth = len(taskName)
		}
	}
	if maxTaskWidth > 50 {
		maxTaskWidth = 50
	}

	// –°—Ç—Ä–æ–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É
	headerFormat := "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ%s‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
	taskHeader := strings.Repeat("‚îÄ", maxTaskWidth+2)
	fmt.Printf(headerFormat, taskHeader)

	fmt.Printf("‚îÇ    ID    ‚îÇ   –ö–æ–Ω—Ç–µ—Å—Ç  ‚îÇ %-*s ‚îÇ –°—Ç–∞—Ç—É—Å ‚îÇ    –í–µ—Ä–¥–∏–∫—Ç      ‚îÇ    –ë–∞–ª–ª—ã        ‚îÇ\n",
		maxTaskWidth, "–ó–∞–¥–∞—á–∞")

	separatorFormat := "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ%s‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
	fmt.Printf(separatorFormat, strings.Repeat("‚îÄ", maxTaskWidth+2))

	for _, sub := range submissions {
		statusEmoji := getShortStatusEmoji(sub.ShownVerdict)

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
		contestDisplay := sub.ContestID
		if contestDisplay == "" {
			contestDisplay = "?"
		}

		// –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
		taskDisplay := getTaskDisplayName(sub)
		if len(taskDisplay) > maxTaskWidth {
			taskDisplay = taskDisplay[:maxTaskWidth-2] + ".."
		}

		verdict := getShortVerdict(sub.ShownVerdictText)
		points := sub.TotalPoints
		if points == 0 && sub.ShownVerdict == 1 {
			points = 100
		}

		fmt.Printf("‚îÇ %-8d ‚îÇ %-10s ‚îÇ %-*s ‚îÇ %-2s %-4s ‚îÇ %-15s ‚îÇ %-15d ‚îÇ\n",
			sub.ID,
			contestDisplay,
			maxTaskWidth,
			taskDisplay,
			statusEmoji,
			"",
			verdict,
			points,
		)
	}

	footerFormat := "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ%s‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n"
	fmt.Printf(footerFormat, strings.Repeat("‚îÄ", maxTaskWidth+2))

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	successCount := 0
	for _, sub := range submissions {
		if sub.ShownVerdict == 1 {
			successCount++
		}
	}

	fmt.Printf("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: %d/%d —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫\n", successCount, len(submissions))

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
	if len(submissions) > 0 {
		fmt.Println("\nüîç –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
		for i := 0; i < len(submissions) && i < 3; i++ {
			fmt.Printf("  sortme status %d\n", submissions[i].ID)
		}
	}
}

func getShortVerdict(verdict string) string {
	// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å UTF-8 —Å—Ç—Ä–æ–∫–∞–º–∏
	if len(verdict) <= 15 {
		return verdict
	}

	// –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –≤–µ—Ä–¥–∏–∫—Ç—ã
	shortVerdicts := map[string]string{
		"–ü–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ":                "–ü—Ä–∏–Ω—è—Ç–æ",
		"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏":         "–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏",
		"–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç":                "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
		"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏": "–¢–∞–π–º-–ª–∏–º–∏—Ç",
		"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏":  "–ú–µ–º–æ—Ä–∏-–ª–∏–º–∏—Ç",
	}

	if short, exists := shortVerdicts[verdict]; exists {
		return short
	}

	// –î–ª—è —Ä—É—Å—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ
	runes := []rune(verdict)
	if len(runes) > 15 {
		return string(runes[:14]) + "‚Ä¶"
	}
	return verdict
}

func getTaskDisplayName(sub Submission) string {
	if sub.ProblemName != "" {
		// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
		return fmt.Sprintf("%d. %s", sub.ProblemID, sub.ProblemName)
	}
	return fmt.Sprintf("%d", sub.ProblemID)
}

func (v *VSCodeExtension) handleContests() {
	if !v.apiClient.IsAuthenticated() {
		fmt.Println("‚ùå –í—ã –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã")
		return
	}

	fmt.Println("üèÜ –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ—Å—Ç–æ–≤...")

	contests, err := v.apiClient.GetContests()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
		return
	}

	if len(contests) == 0 {
		fmt.Println("üì≠ –ö–æ–Ω—Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return
	}

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ—Å—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
	var active, archive []Contest
	for _, contest := range contests {
		if contest.Status == "active" && contest.Started {
			active = append(active, contest)
		} else if contest.Status == "archive" {
			archive = append(archive, contest)
		}
	}

	// –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ (–∫–∞–∫ –≤—ã requested)
	if len(archive) > 0 {
		fmt.Printf("\nüìö –ê—Ä—Ö–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ—Å—Ç—ã (%d):\n", len(archive))
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 8 –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ—Å—Ç–æ–≤
		showCount := len(archive)
		if showCount > 8 {
			showCount = 8
		}

		for i := 0; i < showCount; i++ {
			contest := archive[i]
			name := contest.Name
			if len(name) > 45 {
				name = name[:45] + "..."
			}
			fmt.Printf("   üî¥ %s\n", name)
		}

		if len(archive) > 8 {
			fmt.Printf("   ... –∏ –µ—â–µ %d –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ—Å—Ç–æ–≤\n", len(archive)-8)
		}
	}

	// –ó–∞—Ç–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ—Å—Ç—ã
	if len(active) > 0 {
		fmt.Printf("\nüéØ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ—Å—Ç—ã (%d):\n", len(active))
		for _, contest := range active {
			fmt.Printf("   üü¢ %s (ID: %s)\n", contest.Name, contest.ID)
		}
	} else {
		fmt.Println("\nüéØ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ—Å—Ç—ã: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ—Å—Ç–æ–≤")
	}

	fmt.Printf("\nüí° –ö–æ–º–∞–Ω–¥—ã:\n")
	fmt.Printf("   sortme problems ID_–∫–æ–Ω—Ç–µ—Å—Ç–∞    - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ–Ω—Ç–µ—Å—Ç–∞\n")
	fmt.Printf("   sortme submit —Ñ–∞–π–ª -c ID -p ID - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ\n")
	fmt.Printf("   sortme problems 456            - –ø—Ä–∏–º–µ—Ä –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π\n")
}

func (a *APIClient) IsTaskSolved(contestID string, taskID int) (bool, error) {
	if !a.IsAuthenticated() {
		return false, fmt.Errorf("not authenticated")
	}

	endpoint := fmt.Sprintf("/getMySubmissionsByTask?id=%d&contestid=%s", taskID, contestID)

	// –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç 0 (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
	submissions, err := a.tryGetSubmissions(endpoint, 0)
	if err != nil {
		return false, err
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –æ—Ç–ø—Ä–∞–≤–∫–∏, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é
	// –ó–∞–¥–∞—á–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–µ—à–µ–Ω–Ω–æ–π –µ—Å–ª–∏ –±—ã–ª–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —É—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
	for _, submission := range submissions {
		if submission.ShownVerdict == 1 && submission.TotalPoints == 100 {
			return true, nil
		}
	}

	return false, nil
}

func (v *VSCodeExtension) handleProblems(contestID string) {
	if !v.apiClient.IsAuthenticated() {
		fmt.Println("‚ùå –í—ã –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã")
		return
	}

	fmt.Printf("üìö –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∫–æ–Ω—Ç–µ—Å—Ç–∞ %s...\n", contestID)

	contestInfo, err := v.apiClient.GetContestInfo(contestID)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: %v\n", err)
		return
	}

	if len(contestInfo.Tasks) == 0 {
		fmt.Println("üì≠ –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return
	}

	fmt.Printf("\nüìö –ó–∞–¥–∞—á–∏ –∫–æ–Ω—Ç–µ—Å—Ç–∞ \"%s\":\n", contestInfo.Name)

	// –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã
	taskStatuses := make([]string, len(contestInfo.Tasks))
	solvedCount := 0

	for i, task := range contestInfo.Tasks {
		// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å rate limiting
		if i > 0 {
			time.Sleep(300 * time.Millisecond)
		}

		solved, err := v.apiClient.IsTaskSolved(contestID, task.ID)
		status := "üîì"
		if err != nil {
			status = "‚ùì" // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏
			fmt.Printf("  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á–∏ %d: %v\n", task.ID, err)
		} else if solved {
			status = "‚úÖ"
			solvedCount++
		}

		taskStatuses[i] = status
	}

	// –¢–µ–ø–µ—Ä—å –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
	for i, task := range contestInfo.Tasks {
		status := taskStatuses[i]
		fmt.Printf("  %s %d. %s (ID: %d)\n", status, i+1, task.Name, task.ID)
	}

	fmt.Printf("\nüí° –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n")
	fmt.Printf("   sortme submit —Ñ–∞–π–ª.cpp -c %s -p ID_–∑–∞–¥–∞—á–∏\n", contestID)

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	totalCount := len(contestInfo.Tasks)
	fmt.Printf("\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: %d/%d –∑–∞–¥–∞—á —Ä–µ—à–µ–Ω–æ", solvedCount, totalCount)

	if totalCount > 0 {
		percent := (solvedCount * 100) / totalCount
		fmt.Printf(" (%d%%)", percent)

		// Progress bar
		barLength := 20
		filled := (solvedCount * barLength) / totalCount
		empty := barLength - filled

		fmt.Printf("\n   [")
		for i := 0; i < filled; i++ {
			fmt.Printf("‚ñà")
		}
		for i := 0; i < empty; i++ {
			fmt.Printf("‚ñë")
		}
		fmt.Printf("]")
	}
	fmt.Println()
}

func (v *VSCodeExtension) handleDownload(contestID, problemID string) {
	fmt.Printf("üîç –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞—á–∏ %s –∏–∑ –∫–æ–Ω—Ç–µ—Å—Ç–∞ %s...\n", problemID, contestID)
	fmt.Println("‚è≥ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sortme explore –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è API")
}

func getStatusEmoji(status string) string {
	switch status {
	case "accepted", "AC":
		return "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ"
	case "wrong_answer", "WA":
		return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç"
	case "time_limit_exceeded", "TLE":
		return "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è"
	case "memory_limit_exceeded", "MLE":
		return "üíæ –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –ø–∞–º—è—Ç—å"
	case "compilation_error", "CE":
		return "üî® –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"
	case "runtime_error", "RE":
		return "üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
	case "pending", "in_queue":
		return "‚è≥ –í –æ—á–µ—Ä–µ–¥–∏"
	case "testing", "running":
		return "üîç –¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è"
	default:
		return status
	}
}

func getShortStatusEmoji(verdict int) string {
	switch verdict {
	case 1: // –ü–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
		return "‚úÖ"
	case 2: // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
		return "‚ùå"
	case 5: // –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
		return "üî®"
	default:
		return "‚è≥"
	}
}
